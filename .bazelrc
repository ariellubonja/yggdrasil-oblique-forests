# Bazel configuration for Yggdrasil Decision Forests
#
# OPTIONS
#
# Linux
#
#   linux_cpp17: Linux build. Uses C++17.
#
# Linux options:
#
#   linux_avx2: AVX2.
#
# Windows
#
#  On Windows, uncomment the output_user_root option to avoid long path issues.
#
#   windows_cpp17: Windows build. Uses C++17.
#
# Windows options:
#
#   windows_avx2: AVX2.
#
# TensorFlow Defines:
#
#   use_tensorflow_io=1: Uses tensorflow for IO operations. Otherwise, use the
#     c++ Standard Library <filesystem>. Note: <filesystem> does not exist in
#     cpp<=14 and it had some issue with gcc<=8. Required to consume dataset
#     encoded as TFRecord of TF.Examples.
#   tensorflow_with_header_lib=1: Uses tensorflow header only library. Useful to
#     use tensorflow dynamic linking. Otherwise, links tensorflow statically (if
#     tensorflow is used).


###############################################################################
# ─── Make Intel oneAPI (icx/icpx) the DEFAULT C/C++ toolchain ───────────────
###############################################################################
# From now on every `bazel build …` picks up the `build:intel` options without
# you having to pass --config=intel each time.  REMOVE or change this line
# whenever you want to switch to a different toolchain.
build --config=intel



# Ariel - set C++ 17 and add debug flags
build --cxxopt=-std=c++17

###############################################################################
# Full debug info for Intel oneAPI (or any other) toolchain
###############################################################################
build:dbg            --strip=never          # keep symbols
build:dbg            --fission=no           # disable .dwp workflow
build:dbg            --features=-fission    # belt-and-braces

# Cancel split-DWARF and minimal-debug flags that icx adds,
# then append a plain “-g” so it’s the last one on the command line
build:dbg            --copt=-gno-split-dwarf
build:dbg            --cxxopt=-gno-split-dwarf
build:dbg            --copt=-g
build:dbg            --cxxopt=-g
build:dbg            --linkopt=-g

# Common flags.
common --experimental_repo_remote_exec

# -----------------------------------------------------------------------------
# Intel Compiler (ICX) Configuration
# -----------------------------------------------------------------------------

# build:intel --cpu=x86_64 # Don't set this. this is for older bazel versions. will lead to "no toolchain defined for cpu x86_64
build:intel --cxxopt=-std=c++17
build:intel --cxxopt=-g --cxxopt=-O2
# build:intel --cxxopt=-g
# build:intel --cxxopt=-O2
build:intel --cxxopt=-qopt-report=max
build:intel --cxxopt=-xHost
build:intel --linkopt=-g
build:intel --linkopt=-O2

# Avoid even more warnings
build:intel --host_cxxopt=-g
build:intel --host_cxxopt=-O2
build:intel --host_linkopt=-g

# Max vectorization
build:intel --cxxopt=-qopt-zmm-usage=high


build:intel_single_threaded --cxxopt=-std=c++17
build:intel_single_threaded --cxxopt=-g
build:intel_single_threaded --cxxopt=-O2
build:intel_single_threaded --cxxopt=-qopt-report=max
build:intel_single_threaded --cxxopt=-xHost
build:intel_single_threaded --cxxopt=-qopt-zmm-usage=high

# === SINGLE-THREAD EXECUTION FLAGS ===
build:intel_single_threaded --cxxopt=-qno-openmp

build:intel_single_threaded --host_cxxopt=-g
build:intel_single_threaded --host_cxxopt=-O2
build:intel_single_threaded --host_linkopt=-g

# build:intel_single_threaded --cxxopt=-no-parallel  # for old intel icc


build --incompatible_enable_cc_toolchain_resolution

# Avoid long path issues on Windows
# startup --output_user_root=C:/tmpbld

# Flags to compile with or without recent version of Bazel.

# Required for bazel <=4, fails with bazel >= 5.
# common --incompatible_restrict_string_escapes=false

build -c opt
build --announce_rc
build --noincompatible_strict_action_env

# Enable after adding python headers to protobuf.
build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true
build --define=grpc_no_ares=true

# Nice print
build:linux --copt=-fdiagnostics-color=always
build --color=yes

# Disable dependencies to Tensorflow.
build --define=use_ydf_tensorflow_proto=1

# Suppress C++ compiler warnings.
build:linux --copt=-w
build:linux --host_copt=-w
build:macos --copt=-w
build:windows --copt=/W0
build:wasm --copt=-w
build:wasm --host_copt=-w

# Build mode.
build:linux_cpp17 --cxxopt=-std=c++17
build:linux_cpp17 --host_cxxopt=-std=c++17
build:linux_cpp17 --config=linux

build:macos --cxxopt=-std=c++17
build:macos --host_cxxopt=-std=c++17

build:windows_cpp17 --cxxopt=/std:c++17
build:windows_cpp17 --host_cxxopt=/std:c++17
build:windows_cpp17 --config=windows

build:windows_cpp20 --cxxopt=/std:c++20
build:windows_cpp20 --host_cxxopt=/std:c++20
build:windows_cpp20 --config=windows

# Instruction set optimizations
build:linux_avx2 --copt=-mavx2
build:windows_avx2 --copt=/arch:AVX2

# Misc build options we need for windows.
build:windows --copt=/D_USE_MATH_DEFINES
build:windows --host_copt=/D_USE_MATH_DEFINES
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
build:windows --copt=-DNOGDI
build:windows --host_copt=-DNOGDI
build:windows --linkopt=/NDEBUG
build:windows --host_linkopt=/NDEBUG
build:windows --linkopt=/OPT:REF
build:windows --host_linkopt=/OPT:REF
build:windows --linkopt=/OPT:ICF
build:windows --host_linkopt=/OPT:ICF
build:windows --experimental_strict_action_env=true
build:windows --copt=/Zc:preprocessor
build:windows --host_copt=/Zc:preprocessor
build:windows --materialize_param_files
build:windows --features=compiler_param_file
build:windows --verbose_failures
build:windows --copt=/Oi
build:windows --host_copt=/Oi
build:windows --copt=/GL
build:windows --host_copt=/GL

# Wasm
# build:wasm --crosstool_top=@emsdk//emscripten_toolchain:everything
build:wasm --cpu=wasm
# build:wasm --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:wasm --copt="-Wno-deprecated-non-prototype"
build:wasm --copt="-Wno-unused-value"
build:wasm --copt="-Wno-unused-function"
build:wasm --copt="-Wno-deprecated-declarations"
build:wasm --copt="-Wno-unused-lambda-capture"
build:wasm --spawn_strategy=local
build:wasm --cxxopt=-std=c++17
build:wasm --host_cxxopt=-std=c++17
build:wasm --host_cxxopt="-fno-exceptions"

# Optional. Just to make it compatible with dynamic linking and TensorFlow.
# build --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
# build --host_cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
